#!/usr/bin/env python3
# -*- coding: utf‚Äë8 -*-

"""
–°–∫—Ä–∏–ø—Ç:  visualise_cameras.py
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pdfplumber, folium, pandas (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞).
–£—Å—Ç–∞–Ω–æ–≤–∫–∞:  pip install pdfplumber folium pandas
–ó–∞–ø—É—Å–∫:     python visualise_cameras.py document.pdf
"""

import sys
import re
from pathlib import Path
import pdfplumber
import pandas as pd
import folium


def extract_coords(pdf_path: Path) -> pd.DataFrame:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—ã —à–∏—Ä–æ—Ç–∞‚Äë–¥–æ–ª–≥–æ—Ç–∞ –∏–∑ PDF –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame."""
    pattern = re.compile(r'([3-4][0-9][.,][0-9]+)[ \t\r\n]+([6][0-9][.,][0-9]+)')
    coords = set()

    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            text = page.extract_text()
            if not text:
                continue

            for raw_lat, raw_lon in pattern.findall(text):
                # –ø—Ä–∏–≤–æ–¥–∏–º ¬´41,555 616¬ª –∏–ª–∏ ¬´41 555616¬ª –∫ ¬´41.555616¬ª
                lat = float(raw_lat.replace(" ", "").replace(",", "."))
                lon = float(raw_lon.replace(" ", "").replace(",", "."))

                # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –¥–ª—è –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
                if 38 <= lat <= 43 and 60 <= lon <= 74:
                    coords.add((round(lat, 6), round(lon, 6)))

    df = pd.DataFrame(coords, columns=["lat", "lon"]).sort_values(["lat", "lon"])
    return df


def extract_coords_by_camera_numbers(pdf_path: Path) -> pd.DataFrame:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–∞–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–¥—Ö–æ–¥."""
    coords = set()
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    pattern = re.compile(r'([3-4][0-9][.,][0-9]+)[ ]+([6][0-9][.,][0-9]+)')

    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            text = page.extract_text()
            if not text:
                continue
            
            lines = text.split('\n')
            for line in lines:
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å 4-–∑–Ω–∞—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (–∫–∞–º–µ—Ä–∞)
                if re.match(r'^[0-9]{4}', line.strip()):
                    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ
                    matches = pattern.findall(line)
                    for raw_lat, raw_lon in matches:
                        try:
                            lat = float(raw_lat.replace(",", "."))
                            lon = float(raw_lon.replace(",", "."))
                            
                            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
                            if 38 <= lat <= 43 and 60 <= lon <= 74:
                                coords.add((round(lat, 6), round(lon, 6)))
                        except ValueError:
                            continue

    df = pd.DataFrame(coords, columns=["lat", "lon"]).sort_values(["lat", "lon"])
    return df


def extract_coords_combined(pdf_path: Path) -> pd.DataFrame:
    """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±–∞ –ø–æ–¥—Ö–æ–¥–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è."""
    coords = set()
    
    # –ú–µ—Ç–æ–¥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä–∞–º –∫–∞–º–µ—Ä
    pattern1 = re.compile(r'([3-4][0-9][.,][0-9]+)[ ]+([6][0-9][.,][0-9]+)')
    
    # –ú–µ—Ç–æ–¥ 2: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
    pattern2 = re.compile(r'([3-4][0-9][.,][0-9]+)[ \t\r\n]+([6][0-9][.,][0-9]+)')

    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            text = page.extract_text()
            if not text:
                continue
            
            # –ú–µ—Ç–æ–¥ 1: –ü–æ —Å—Ç—Ä–æ–∫–∞–º —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–∞–º–µ—Ä
            lines = text.split('\n')
            for line in lines:
                if re.match(r'^[0-9]{4}', line.strip()):
                    matches = pattern1.findall(line)
                    for raw_lat, raw_lon in matches:
                        try:
                            lat = float(raw_lat.replace(",", "."))
                            lon = float(raw_lon.replace(",", "."))
                            if 38 <= lat <= 43 and 60 <= lon <= 74:
                                coords.add((round(lat, 6), round(lon, 6)))
                        except ValueError:
                            continue
            
            # –ú–µ—Ç–æ–¥ 2: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            matches = pattern2.findall(text)
            for raw_lat, raw_lon in matches:
                try:
                    lat = float(raw_lat.replace(",", "."))
                    lon = float(raw_lon.replace(",", "."))
                    if 38 <= lat <= 43 and 60 <= lon <= 74:
                        coords.add((round(lat, 6), round(lon, 6)))
                except ValueError:
                    continue

    df = pd.DataFrame(coords, columns=["lat", "lon"]).sort_values(["lat", "lon"])
    return df


def make_map(df: pd.DataFrame, outfile: Path = Path("cameras_map.html")) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É Folium —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ –∫–∞–º–µ—Ä."""
    center = [df["lat"].mean(), df["lon"].mean()]
    m = folium.Map(location=center, zoom_start=8, tiles="OpenStreetMap")

    for _, row in df.iterrows():
        folium.CircleMarker(
            location=[row["lat"], row["lon"]],
            radius=4,
            weight=1,
            fill=True,
            fill_opacity=0.8,
        ).add_to(m)

    m.save(outfile)
    print(f"üó∫  –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {outfile.absolute()}")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        sys.exit("–£–∫–∞–∂–∏ –ø—É—Ç—å –∫ PDF:  python visualise_cameras.py document.pdf")

    pdf_path = Path(sys.argv[1])
    if not pdf_path.exists():
        sys.exit(f"–§–∞–π–ª {pdf_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä–∞–º –∫–∞–º–µ—Ä
    df_coords = extract_coords_combined(pdf_path)
    print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {len(df_coords)}")
    make_map(df_coords) 